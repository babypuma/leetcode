/*
 * Author : Jeremy Zhao
 * Email  : jqzhao@live.com
 * Date   : 2020/09/30
 *
 * Source : https://leetcode-cn.com/problems/longest-arithmetic-subsequence/
 * Problem:	Longest Arithmetic Subsequence
 *
 */
#include <gtest/gtest.h>
#include "longest_arithmetic_subsequence.h"

class SolutionTest : public ::testing::Test {
 protected:
   virtual void SetUp() {
   }
   virtual void TearDown() {
   }

   Solution solution_;
};

TEST_F(SolutionTest, longestArithSeqLength) {
  int a[] = {9,4,7,2,10};
  vector<int> vec(a, a + sizeof(a)/sizeof(a[0]));
  EXPECT_EQ(solution_.longestArithSeqLength(vec), 3);
}

TEST_F(SolutionTest, longestArithSeqLength2) {
  int a[] = {83,20,17,43,52,78,68,45};
  vector<int> vec(a, a + sizeof(a)/sizeof(a[0]));
  EXPECT_EQ(solution_.longestArithSeqLength(vec), 2);
}

TEST_F(SolutionTest, longestArithSeqLength3) {
  int a[] = {12,28,13,6,34,36,53,24,29,2,23,0,22,25,53,34,23,50,35,43,53,11,48,56,44,53,31,6,31,57,46,6,17,42,48,28,5,24,0,14,43,12,21,6,30,37,16,56,19,45,51,10,22,38,39,23,8,29,60,18};
  vector<int> vec(a, a + sizeof(a)/sizeof(a[0]));
  EXPECT_EQ(solution_.longestArithSeqLength(vec), 4);
}

TEST_F(SolutionTest, longestArithSeqLength4) {
  int a[] = {3,6,9,12};
  vector<int> vec(a, a + sizeof(a)/sizeof(a[0]));
  EXPECT_EQ(solution_.longestArithSeqLength(vec), 4);
}

TEST_F(SolutionTest, longestArithSeqLength5) {
  int a[] = {452,301,155,439,314,479,401,374,4,41,132,145,30,4,116,188,55,380,362,282,393,235,11,114,139,7,186,483,492,409,56,465,460,211,64,95,405,93,114,386,120,173,434,359,448,348,87,146,170,111,6,336,443,40,34,25,133,262,410,129,419,160,121,244,392,117,235,316,372,288,315,123,300,345,20,136,492,493,36,136,72,461,328,347,415,36,455,232,354,298,42,148,419,248,318,335,262,327,451,215,25,13,144,19,66,38,422,143,108,363,337,75,334,264,97,298,261,122,328,242,261,223,404,416,352,490,138,458,484,143,447,294,181,329,400,180,343,61,435,310,192,0,418,452,284,251,181,135,85,92,438,366,290,486,276,319,347,301,105,302,179,115,15,374,382,8,113,138,257,496,188,417,317,432,42,398,109,112,326,10,326,58,447,274,192,166,485,208,436,367,404,158,375,355,381,197,167,492,347,286,237,104,25,145,493,481,195,40,153,69,109,81,310,206,15,214,317,422,75,377,78,69,186,187,411,143,465,30,168,472,312,237,195,36,47,201,270,13,124,260,186,421,301,343,123,318,265,317,73,438,185,268,499,229,399,488,497,341,194,360,266,167,131,100,267,112,22,500,248,113,74,37,107,117,189,70,243,258,369,61,50,396,351,32,324,327,411,387,46,213,282,354,399,278,41,343,433,254,401,295,57,28,168,82,176,115,214,363,303,478,148,462,370,315,130,298,479,395,427,364,107,187,395,344,121,270,52,461,260,317,330,174,158,386,342,46,495,218,401,228,267,4,385,347,335,348,75,439,176,19,396,248,194,462,166,460,423,338,380,144,399,142,363,416,26,160,45,222,239,63,108,256,493,143,281,63,244,433,109,224,275,61,421,495,467,239,235,354,385,203,452,273,182,102,419,400,305,77,319,162,315,63,288,319,200,170,333,401,419,136,420,27,398,10,229,480,218,29,255,488,482,415,127,111,500,383,293,70,244,421,471,398,448,388,203,70,143,463,114,123,227,372,52,332,35,56,114,32,216,387,391,489,240,122,194,61,149,17,35,138,414,379,119,192,115,89,375,224,292,27,53,49,182,342,310,200,235,314,448,98,40,375,156,276,333,120,165,263,90,493,381,138,158,285,75,283,332,476,440,255,382,10,395,497,229,243,0,48,61,5,261,7,433,67,142,254,411,140,336,310,124,23,140,424,444,359,409,30,426,468,364,367,211,202,95,272,88,13,169,427,492,491,413,32,417,281,9,272,53,321,140,237,6,130,353,41,157,87,363,153,176,434,55,117,130,74,464,169,346,314,0,363,300,243,333,230,454,486,335,300,135,67,388,257,279,53,493,451,434,491,187,479,412,350,365,442,115,275,456,25,160,363,431,121,403,24,72,399,139,196,21,121,310,175,277,50,457,58,16,461,120,133,255,491,304,399,421,225,474,52,21,115,385,52,314,112,495,306,495,277,480,182,94,384,399,102,426,30,354,75,2,179,476,443,115,251,58,13,211,413,348,233,157,265,387,43,290,64,140,328,117,34,61,182,457,131,369,368,312,366,335,234,137,164,80,353,345,337,389,38,309,442,46,51,377,1,86,273,33,188,295,59,472,18,0,223,334,149,48,243,352,129,86,7,153,474,170,355,471,49,39,42,20,37,148,29,408,400,178,41,28,494,233,258,168,147,346,288,122,109,193,459,77,114,360,274,449,112,352,301,142,212,163,395,384,25,286,206,159,113,408,257,433,55,153,269,90,444,174,453,397,201,203,463,269,270,487,346,248,226,83,218,200,343,456,136,259,79,201,296,495,54,271,283,392,140,27,106,209,197,373,379,400,41};
  vector<int> vec(a, a + sizeof(a)/sizeof(a[0]));
  EXPECT_EQ(solution_.longestArithSeqLength(vec), 8);
}

